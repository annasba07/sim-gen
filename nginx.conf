# SimGen AI nginx Configuration with WebSocket Session Affinity
# Ensures WebSocket connections are sticky to prevent disconnections

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=5r/s;

    # Upstream configuration with sticky sessions
    upstream api_backend {
        # Use IP hash for session affinity
        ip_hash;

        server api1:8000 max_fails=3 fail_timeout=30s;
        server api2:8000 max_fails=3 fail_timeout=30s;

        # Health checks
        keepalive 32;
    }

    # Separate upstream for WebSocket with even stricter affinity
    upstream websocket_backend {
        # IP hash ensures same client always hits same server
        ip_hash;

        server api1:8000 max_fails=2 fail_timeout=15s;
        server api2:8000 max_fails=2 fail_timeout=15s;

        # Longer keepalive for WebSocket connections
        keepalive 64;
    }

    # Map to determine if request is WebSocket
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy strict-origin-when-cross-origin;

        # Client max body size (for image uploads)
        client_max_body_size 50M;
        client_body_timeout 60s;
        client_header_timeout 60s;

        # WebSocket location with sticky sessions
        location /ws {
            # Rate limiting for WebSocket connections
            limit_req zone=websocket burst=5 nodelay;

            # Proxy to WebSocket backend with affinity
            proxy_pass http://websocket_backend;

            # WebSocket headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Preserve client information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;

            # Disable buffering for real-time streaming
            proxy_buffering off;
            proxy_request_buffering off;

            # Session affinity header
            proxy_set_header X-Session-Affinity $remote_addr;
        }

        # API endpoints with load balancing but session awareness
        location /api {
            # Rate limiting for API calls
            limit_req zone=api burst=20 nodelay;

            # Proxy to API backend
            proxy_pass http://api_backend;

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # API timeouts
            proxy_read_timeout 120s;
            proxy_send_timeout 120s;
            proxy_connect_timeout 10s;

            # Enable response compression
            proxy_set_header Accept-Encoding gzip;
        }

        # Health check endpoint (bypasses load balancer)
        location /health {
            # Round-robin for health checks
            proxy_pass http://api_backend;
            proxy_set_header Host $host;

            # Quick timeout for health checks
            proxy_read_timeout 5s;
            proxy_send_timeout 5s;
            proxy_connect_timeout 5s;
        }

        # Static files (if any)
        location /static {
            alias /var/www/static;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Documentation
        location /docs {
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default location
        location / {
            # Redirect to API documentation
            return 301 /docs;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Optional: HTTPS configuration (for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /path/to/cert.pem;
    #     ssl_certificate_key /path/to/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # ... same location blocks as above
    # }
}

# Stream block for TCP load balancing (if needed for database connections)
stream {
    # Database connection pooling (if not using PgBouncer)
    upstream postgres_backend {
        server postgres:5432 max_fails=2 fail_timeout=10s;
    }

    # Redis backend
    upstream redis_backend {
        server redis:6379 max_fails=2 fail_timeout=10s;
    }

    # Optional: PostgreSQL proxy
    # server {
    #     listen 5432;
    #     proxy_pass postgres_backend;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    # }

    # Optional: Redis proxy
    # server {
    #     listen 6379;
    #     proxy_pass redis_backend;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    # }
}